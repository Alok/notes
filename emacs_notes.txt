Writing A Spotify Client in 16 Minutes
    https://www.youtube.com/watch?v=XjKtkEMUYGc

http://www.masteringemacs.org/

http://www.emacswiki.org/emacs/Reference_Sheet_by_Aaron_Hawley

C-h m           available major/minor modes and bindings
C-h k           show the functions bound to a key sequence
C-h f           show the key sequence(s) bound to a function
M-x occur       regex-based outline!

TERMINAL
========
eshell / smar-display:
    http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/

for a "true" terminal in emacs (as opposed to eshell)
    multi-term

synopsis of shell and terminal modes included in Emacs
    https://lukeshu.com/blog/emacs-shells.html
tips, env vars
    http://snarfed.org/why_i_run_shells_inside_emacs

http://crypt.codemancers.com/posts/2013-09-26-setting-up-emacs-as-development-environment-on-osx/
http://www.reddit.com/r/emacs/comments/1p6m82/making_emacs_work_for_me/

https://github.com/jonathanchu/emacs-powerline

golang repl:
    https://github.com/sergey-pashaev/gore-mode


LISP
====
show results in buffer, a la Light table:
    <C-j> eval-print-last-sexp

#'foo is sugar for (function foo)
'foo  is sugar for (quote foo)

The (function) special form returns function-object without evaluating it.
- When the code is byte-compiled, function-object is compiled into a byte-code function object
- When lexical binding is enabled, function-object is converted into a closure.
- The following forms are all equivalent:
     (lambda (x) (* x x))
     (function (lambda (x) (* x x)))
     #'(lambda (x) (* x x))

;; macroexpand expands the form until a non-macro is found, but
;; it does _not_ inspect _sub_expressions in the resolved macro.
;; http://www.chemie.fu-berlin.de/chemnet/use/info/elisp/elisp_13.html
(defmacro inc (var)
    (list 'setq var (list '1+ var)))
    ;; => inc

(macroexpand '(inc r))
    ;; => (setq r (1+ r))

(defmacro inc2 (var1 var2)
    (list 'progn (list 'inc var1) (list 'inc var2)))
    ;; => inc2

(macroexpand '(inc2 r s))
    ;; => (progn (inc r) (inc s))
