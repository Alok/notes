VIM NOTES
==================
good:
    http://vimcasts.org/

plugins:
    ctags.sourceforge.net 
        export PATH="/usr/local/bin:$PATH"

READ results into cursor position (acme!) - http://stackoverflow.com/a/2960630 
                                            http://superuser.com/a/251959/114842
    :r!foo                 read in stdout from a shell command
    :r [file]              read in [file] contents of 
    <c-r>=&vim_variable    (doesn't like abbreviated names, but wildmenu works)
    <c-r>=SomeFunction()
    <c-r>%
    <c-r>#
    <c-r>:

REDIRECT messages (all output from all vim commands)
    :redir >> [file]
    :redir @x          redirect to register 'x'
    :redir END
    :let @x = system('ls')  store shell command output to register x

REGISTERS: http://stackoverflow.com/a/3997110/152142
    "=       expression register
            ex: "=command_or_&variable<cr>p
    ""       unnamed register (always gets written-to)
    "_       blackhole register
    "0       contains the last yank
    "1 .."9  contain the last 9 deletions

fundamental:
    capitalizing (shift) performs the "mirror" of the command
    .             repeat the previous command
    :5,42[cmd]    prepend a range to any command

    :[range]g/{pattern}/[cmd]
        Execute [cmd] on the lines within [range] where {pattern} matches.
        Use :g! to execute where {pattern} does NOT match.
        To run a non-Ex command, use the ":normal" command: 
            :g/pat/normal {commands}




modifiers:
    *,#  search "whole word" under cursor
    f    forward
    t    til

special buffers:
    q:
    q/

macro recording/playback:
    qx  start recording in register x 
    q   stop recording
    @x  execute the text in register x 
        example: (acme!) yank any text, then execute with @"
    @@  replay the most recent macro
    @:  repeat the last command!

window splitting:
    ctrl-w-v   ctrl-w-s
    ctrl-w-[c hjkl]
    ctrl-w-[= | _]

buffer hopping:
    ctrl-^ :ls

file management (netrw):
    :E     browse directory of current buffer (_not_ the :pwd directory)

MOVE through text:
    gg G ^ $ f t ; % 
    ]} ]] ) } 
    gx = open url under cursor

MOVE through the "change list":
    g; g, :changes

MOVE through the "jump list":
    ctrl-o ctrl-i

editing:
    i I a A o O J
    c[iaft]["({]
    c/foo 

indentation (normal/visual mode):
    > <      indent
    ==       fix indent

indentation, (insert mode):
    ctrl-t ctrl-d

selection:
    vib vab      b = parentheses block
    viB vi{ vaB  B = brace block

magic:
    ~        toggle case

debugging vim
    :scriptnames
    :verbose set &foo
    :verbose map %

